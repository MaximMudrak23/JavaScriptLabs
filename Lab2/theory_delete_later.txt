Импортируем модули
http - для того, чтобы запускать http сервак и отправлять на него
http запросы
zlib - позволяет сжимать и разжимать данные, чтобы они меньше
весили, когда мы хотим их передавать как ответ сервака например
fs - для работы с файловой системой, создать файл, вписать текст итд

client.js:
1) делаем константу на адрес сервака, тоесть его host и port
2) const readStream = fs.createReadStream('clientRequest.txt')
создает поток для чтения данных из файла clientRequest
3) const gzipStream = zlib.createGzip()
создаем поток, для сжатия данных
тоесть теперь, я могу использовать переменную gzipStream
чтобы передавать данные, через этот поток и сжимать их
в соответствии с алгоритмом Gzip
4) методы .on и .pipe используются для работы с потоками
.on - .on('error', callback) этот метод привязывает обработчик
события к потоку, который будет вызван, когда возникает ошибка
в потоке
.pipe - этот метод используется для передачи данных из одного
потока в другой. Он берет поток к которому он применяется
и передает его вывод в другой поток, указанный в качестве
аргумента метода.
В данном коде, .pipe(gzipStream) используется для передачи 
данных из потока чтения в поток сжатия, а затем 
.pipe(http.request(...)) используется для отправки сжатых 
данных на сервер через HTTP запрос.

Обробник для події "response": 
Цей обробник викликається, коли приходить 
відповідь від сервера після відправлення 
HTTP-запиту.

Сигнатура обробника подій .on('error', (err) => { ... }) має два параметри:

'error': Це перший параметр і вказує на 
тип події, яку слід обробляти. У цьому 
випадку, обробник призначений для події 
"error", тобто він буде викликаний, коли 
виникне помилка.

(err) => { ... }: Це другий параметр і 
представляє собою функцію-обробник, яка 
викликається, коли відбувається подія 
"error". Вона має один параметр err, який 
представляє об'єкт помилки. У цьому 
конкретному випадку, обробник виводить 
повідомлення про помилку разом з об'єктом 
помилки в консоль за допомогою console.error().